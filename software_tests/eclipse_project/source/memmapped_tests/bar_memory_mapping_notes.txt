0. Introduction
~~~~~~~~~~~~~~~

Notes about how the BARs are memory mapped.

Using a HP Z4 G4 PC, with AlmaLinux 8.7 and Kernel 4.18.0-425.3.1.el8.x86_64


1. memmapped_persistence_vfio with prefetchable BARs
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Using the memmapped_blkram FPGA which uses 64-bit BARs which the Xilinx IP sets as pre-fetchable:
$ bin/debug/dump_info/dump_info_pciutils 
Access method : linux-sysfs
domain=0000 bus=15 dev=00 func=00
  vendor_id=10ee (Xilinx Corporation) device_id=7024 (Device 7024) subvendor_id=0002 subdevice_id=0001
  control: I/O- Mem+ BusMaster-
  IOMMU group: 41
  bar[0] base_addr=387fffe00000 size=100000 is_IO=0 is_prefetchable=1 is_64=1
  bar[2] base_addr=387ffff00000 size=20000 is_IO=0 is_prefetchable=1 is_64=1
  bar[4] base_addr=387ffff20000 size=10000 is_IO=0 is_prefetchable=1 is_64=1

Secure boot was enabled, and kernel_lockdown prevents access to debugfs.
I.e. are unable to access /sys/kernel/debug/x86/pat_memtype_list

Booting with debugpat temporarily added to the command line causes x86/PAT messages to be output in dmesg
which can be used to monitor changes to the PAT configuration. However, the debug output is verbose
since contains changes from other devices.

The following finds the range of physical addresses for the host bridge used to access the PCI device:
$ sudo cat /proc/iomem
<snip> 
384000000000-387fffffffff : PCI Bus 0000:14
  387fffe00000-387fffffffff : PCI Bus 0000:15
    387fffe00000-387fffefffff : 0000:15:00.0
    387ffff00000-387ffff1ffff : 0000:15:00.0
    387ffff20000-387ffff2ffff : 0000:15:00.0

The following is the x86/PAT debug produced for one run of memmapped_persistence_vfio, filtering the debug
output for the physical addresses of the PCI device:
$ dmesg|grep x86/PAT|grep 387fff
[ 4121.624625] x86/PAT: memtype_reserve added [mem 0x387fffe00000-0x387fffefffff], track uncached-minus, req uncached-minus, ret uncached-minus
[ 4121.624698] x86/PAT: Overlap at 0x387fffe00000-0x387ffff00000
[ 4121.624704] x86/PAT: memtype_reserve added [mem 0x387fffe00000-0x387fffefffff], track uncached-minus, req uncached-minus, ret uncached-minus
[ 4121.624825] x86/PAT: memtype_free request [mem 0x387fffe00000-0x387fffefffff]
[ 4121.624887] x86/PAT: memtype_reserve added [mem 0x387ffff00000-0x387ffff1ffff], track uncached-minus, req uncached-minus, ret uncached-minus
[ 4121.624929] x86/PAT: Overlap at 0x387ffff00000-0x387ffff20000
[ 4121.624934] x86/PAT: memtype_reserve added [mem 0x387ffff00000-0x387ffff1ffff], track uncached-minus, req uncached-minus, ret uncached-minus
[ 4121.625020] x86/PAT: memtype_free request [mem 0x387ffff00000-0x387ffff1ffff]
[ 4121.625080] x86/PAT: memtype_reserve added [mem 0x387ffff20000-0x387ffff2ffff], track uncached-minus, req uncached-minus, ret uncached-minus
[ 4121.625113] x86/PAT: Overlap at 0x387ffff20000-0x387ffff30000
[ 4121.625118] x86/PAT: memtype_reserve added [mem 0x387ffff20000-0x387ffff2ffff], track uncached-minus, req uncached-minus, ret uncached-minus
[ 4121.625191] x86/PAT: memtype_free request [mem 0x387ffff20000-0x387ffff2ffff]
[ 4121.625212] x86/PAT: memtype_free request [mem 0x387fffe00000-0x387fffefffff]
[ 4121.625217] x86/PAT: memtype_free request [mem 0x387ffff00000-0x387ffff1ffff]
[ 4121.625220] x86/PAT: memtype_free request [mem 0x387ffff20000-0x387ffff2ffff]

This shows that all BARs are using "uncached-minus"

While stepping memmapped_persistence_vfio in the debugger and looking when the x86/PAT debug output appears:
1. After memmap() on BAR 0:
[ 7838.634233] x86/PAT: memtype_reserve added [mem 0x387fffe00000-0x387fffefffff], track uncached-minus, req uncached-minus, ret uncached-minus

2. After access to the BAR 0 in the program:
[ 7895.187476] x86/PAT: Overlap at 0x387fffe00000-0x387ffff00000
[ 7895.187482] x86/PAT: memtype_reserve added [mem 0x387fffe00000-0x387fffefffff], track uncached-minus, req uncached-minus, ret uncached-minus

3. After munmap() on BAR 0:
[ 7970.377628] x86/PAT: memtype_free request [mem 0x387fffe00000-0x387fffefffff]

Looks like x86/PAT gets triggered to update a PAT mapping both either:
a. The vifo driver handles a mmap() or munmap() request.
b. The application referecences the mapping (for the first time), which is what seems to trigger the "x86/PAT: Overlap at"
   debug message. Adding a mlockall (MCL_CURRENT | MCL_FUTURE) call to the application didn't change this behaviour.

   Looking in /usr/src/debug/kernel-4.18.0-425.3.1.el8/linux-4.18.0-425.3.1.el8.x86_64/drivers/vfio/pci/vfio_pci.c
   - vfio_pci_mmap() doesn't populate the VMA of the mapping
   - vfio_pci_mmap_fault() populates the entire VMA of the mapping

   I.e. looks like the mapping isn't populated in the application until the first access, which triggers a page fault.

In /usr/src/debug/kernel-4.18.0-425.3.1.el8/linux-4.18.0-425.3.1.el8.x86_64/drivers/vfio/pci/vfio_pci.c the vfio_pci_mmap()
function always calls pgprot_noncached() to create the mapping for a BAR, and therefore doesn't give any way to allow
a write-combined mapping to be specified by the application.

The vfio_pci_core_mmap() function in the latest https://github.com/torvalds/linux/blob/master/drivers/vfio/pci/vfio_pci_core.c
still always calls pgprot_noncached

https://patchwork.kernel.org/project/kvm/patch/20171009025000.39435-1-aik@ozlabs.ru/ was a patch to allow vfio to
use write-combining mappings for pre-fetchable BARs, but not sure what happened to the patch.

gdb is unable to view the memory mapped BARs, regardless of if secure boot is enabled or disabled, reporting errors of the form:
  Error message from debugger back end:
  Cannot access memory at address 0x7ffff7ee1000

In /usr/src/debug/kernel-4.18.0-425.3.1.el8/linux-4.18.0-425.3.1.el8.x86_64/drivers/vfio/pci/vfio_pci.c the only operations
are the following. I.e. doesn't set access operation which ptrace (and thus gdb) uses to access the mapping:
static const struct vm_operations_struct vfio_pci_mmap_ops = {
    .open = vfio_pci_mmap_open,
    .close = vfio_pci_mmap_close,
    .fault = vfio_pci_mmap_fault,
};

The latest https://github.com/torvalds/linux/blob/master/drivers/vfio/pci/vfio_pci_core.c also doesn't have the
access operation.


2. memmapped_persistence_libpciaccess with non-pefetchable BARs
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Using the memmapped_blkram_32bit_bars FPGA which uses 32-bit BARs which the Xilinx IP sets as non-prefetchable:
[mr_halfword@skylake-alma eclipse_project]$ bin/release/dump_info/dump_info_pciutils 
Access method : linux-sysfs
domain=0000 bus=15 dev=00 func=00
  vendor_id=10ee (Xilinx Corporation) device_id=7024 (Device 7024) subvendor_id=0002 subdevice_id=0001
  control: I/O- Mem+ BusMaster-
  physical slot: 3-1
  IOMMU group: 25
  bar[0] base_addr=96800000 size=100000 is_IO=0 is_prefetchable=0 is_64=0
  bar[1] base_addr=96900000 size=20000 is_IO=0 is_prefetchable=0 is_64=0
  bar[2] base_addr=96920000 size=10000 is_IO=0 is_prefetchable=0 is_64=0
domain=0000 bus=36 dev=00 func=00
  vendor_id=10ee (Xilinx Corporation) device_id=7011 (7-Series FPGA Hard PCIe block (AXI/debug)) subvendor_id=0000 subdevice_id=0000
  control: I/O- Mem+ BusMaster-
  physical slot: 6-1
  IOMMU group: 86
  bar[0] base_addr=38fff0000000 size=20000 is_IO=0 is_prefetchable=1 is_64=1
  bar[2] base_addr=38fff0020000 size=10000 is_IO=0 is_prefetchable=1 is_64=1

Secure boot was disabled, which allows the direct PCI access used by memmapped_persistence_libpciaccess

The memmapped_persistence_libpciaccess program hard codes setting the PCI_DEV_MAP_FLAG_WRITE_COMBINE flags in the
call to pci_device_map_range() without checking if the BAR is prefetchable or not.

After mapping bar[0] base_addr=96800000 /sys/kernel/debug/x86/pat_memtype_list shows:
PAT: [mem 0x0000000096800000-0x0000000096900000] uncached-minus

After mapping bar[1] base_addr=96900000 /sys/kernel/debug/x86/pat_memtype_list shows:
PAT: [mem 0x0000000096900000-0x0000000096920000] uncached-minus

After mapping bar[2] base_addr=96920000 /sys/kernel/debug/x86/pat_memtype_list shows:
PAT: [mem 0x0000000096920000-0x0000000096930000] uncached-minus

The above shows using PCI_DEV_MAP_FLAG_WRITE_COMBINE with a non-prefetchable BAR results in a uncached-minus PAT type.


3. memmapped_persistence_libpciaccess with pefetchable BARs
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Using the memmapped_blkram FPGA which uses 64-bit BARs which the Xilinx IP sets as pre-fetchable:
[mr_halfword@skylake-alma eclipse_project]$ bin/release/dump_info/dump_info_pciutils 
Access method : linux-sysfs
domain=0000 bus=15 dev=00 func=00
  vendor_id=10ee (Xilinx Corporation) device_id=7024 (Device 7024) subvendor_id=0002 subdevice_id=0001
  control: I/O- Mem+ BusMaster-
  physical slot: 3-1
  IOMMU group: 25
  bar[0] base_addr=387f80000000 size=100000 is_IO=0 is_prefetchable=1 is_64=1
  bar[2] base_addr=387f80100000 size=20000 is_IO=0 is_prefetchable=1 is_64=1
  bar[4] base_addr=387f80120000 size=10000 is_IO=0 is_prefetchable=1 is_64=1
domain=0000 bus=36 dev=00 func=00
  vendor_id=10ee (Xilinx Corporation) device_id=7011 (7-Series FPGA Hard PCIe block (AXI/debug)) subvendor_id=0000 subdevice_id=0000
  control: I/O- Mem+ BusMaster-
  physical slot: 6-1
  IOMMU group: 86
  bar[0] base_addr=38fff0000000 size=20000 is_IO=0 is_prefetchable=1 is_64=1
  bar[2] base_addr=38fff0020000 size=10000 is_IO=0 is_prefetchable=1 is_64=1

Secure boot was disabled, which allows the direct PCI access used by memmapped_persistence_libpciaccess

The memmapped_persistence_libpciaccess program hard codes setting the PCI_DEV_MAP_FLAG_WRITE_COMBINE flags in the
call to pci_device_map_range() without checking if the BAR is prefetchable or not.

After mapping bar[0] base_addr=387f80000000 /sys/kernel/debug/x86/pat_memtype_list shows:
PAT: [mem 0x0000387f80000000-0x0000387f80100000] write-combining

After mapping bar[2] base_addr=387f80100000 /sys/kernel/debug/x86/pat_memtype_list shows:
PAT: [mem 0x0000387f80100000-0x0000387f80120000] write-combining

After mapping bar[4] base_addr=387f80120000 /sys/kernel/debug/x86/pat_memtype_list shows:
PAT: [mem 0x0000387f80120000-0x0000387f80130000] write-combining

The above shows using PCI_DEV_MAP_FLAG_WRITE_COMBINE with a prefetchable BAR results in a write-combining PAT type.

gdb is able to access the memory mapped BARs and show their contents.

/usr/src/debug/kernel-4.18.0-425.3.1.el8/linux-4.18.0-425.3.1.el8.x86_64/drivers/pci/mmap.c 
has the following which defines an access operation for the mapping:
static const struct vm_operations_struct pci_phys_vm_ops = {
#ifdef CONFIG_HAVE_IOREMAP_PROT
    .access = generic_access_phys,
#endif
};
