#*****************************************************************************************
# Vivado (TM) v2024.2 (64-bit)
#
# create_example_project.tcl: Tcl script for re-creating project 'ibert_ultrascale_gty_0_ex'
#
# Generated by Vivado on Fri Jan 03 17:33:55 GMT 2025
# IP Build 5239520 on Sun Nov 10 16:12:51 MST 2024
#
# This file contains the Vivado Tcl commands for re-creating the project to the state*
# when this script was generated. In order to re-create the project, please source this
# file in the Vivado Tcl Shell.
#
# * Note that the runs in the created project will be configured the same way as the
#   original project, however they will not be launched automatically. To regenerate the
#   run results please launch the synthesis/implementation runs as needed.
#
#*****************************************************************************************
# NOTE: In order to use this script for source control purposes, please make sure that the
#       following files are added to the source control system:-
#
# 1. This project restoration tcl script (create_example_project.tcl) that was generated.
#
# 2. The following source(s) files that were local or imported into the original project.
#    (Please see the '$orig_proj_dir' and '$origin_dir' variable setting below at the start of the script)
#
#    <none>
#
# 3. The following remote source files that were added to the original project:-
#
#    "/home/mr_halfword/fpga_sio/fpga_tests/XCKU5P_DUAL_QSFP_ibert_4.166/example_ibert_ultrascale_gty_0.v"
#    "/home/mr_halfword/fpga_sio/multiple_boards/usr_accesse2_read.vhd"
#    "/home/mr_halfword/fpga_sio/fpga_tests/XCKU5P_DUAL_QSFP_ibert_4.166/ip/sources_1/ip/ibert_ultrascale_gty_0/ibert_ultrascale_gty_0.xci"
#    "/home/mr_halfword/fpga_sio/fpga_tests/XCKU5P_DUAL_QSFP_ibert_4.166/example_ibert_ultrascale_gty_0.xdc"
#    "/home/mr_halfword/fpga_sio/fpga_tests/XCKU5P_DUAL_QSFP_ibert_4.166/ibert_ultrascale_gty_ip_example.xdc"
#    "/home/mr_halfword/fpga_sio/fpga_tests/XCKU5P_DUAL_QSFP_ibert_4.166/ibert_waivers_example.xdc"
#    "/home/mr_halfword/fpga_sio/XCKU5P_DUAL_QSFP/constraints/qaudspi.xdc"
#    "/home/mr_halfword/fpga_sio/XCKU5P_DUAL_QSFP/constraints/pcie.xdc"
#    "/home/mr_halfword/fpga_sio/XCKU5P_DUAL_QSFP/constraints/qsfp_control_signals.xdc"
#    "/home/mr_halfword/fpga_sio/multiple_boards/copy_bitstream_and_mask.tcl"
#
#*****************************************************************************************

# Check file required for this script exists
proc checkRequiredFiles { origin_dir} {
  set status true
  set files [list \
 "[file normalize "$origin_dir/example_ibert_ultrascale_gty_0.v"]"\
 "[file normalize "$origin_dir/../../multiple_boards/usr_accesse2_read.vhd"]"\
 "[file normalize "$origin_dir/ip/sources_1/ip/ibert_ultrascale_gty_0/ibert_ultrascale_gty_0.xci"]"\
 "[file normalize "$origin_dir/example_ibert_ultrascale_gty_0.xdc"]"\
 "[file normalize "$origin_dir/ibert_ultrascale_gty_ip_example.xdc"]"\
 "[file normalize "$origin_dir/ibert_waivers_example.xdc"]"\
 "[file normalize "$origin_dir/../../XCKU5P_DUAL_QSFP/constraints/qaudspi.xdc"]"\
 "[file normalize "$origin_dir/../../XCKU5P_DUAL_QSFP/constraints/pcie.xdc"]"\
 "[file normalize "$origin_dir/../../XCKU5P_DUAL_QSFP/constraints/qsfp_control_signals.xdc"]"\
 "[file normalize "$origin_dir/../../multiple_boards/copy_bitstream_and_mask.tcl"]"\
  ]
  foreach ifile $files {
    if { ![file isfile $ifile] } {
      puts " Could not find remote file $ifile "
      set status false
    }
  }

  return $status
}
# Set the reference directory for source file relative paths (by default the value is script directory path)
set origin_dir "."

# Use origin directory path location variable, if specified in the tcl shell
if { [info exists ::origin_dir_loc] } {
  set origin_dir $::origin_dir_loc
}

# Set the project name
set _xil_proj_name_ "ibert_ultrascale_gty_0_ex"

# Use project name variable, if specified in the tcl shell
if { [info exists ::user_project_name] } {
  set _xil_proj_name_ $::user_project_name
}

variable script_file
set script_file "create_example_project.tcl"

# Help information for this script
proc print_help {} {
  variable script_file
  puts "\nDescription:"
  puts "Recreate a Vivado project from this script. The created project will be"
  puts "functionally equivalent to the original project for which this script was"
  puts "generated. The script contains commands for creating a project, filesets,"
  puts "runs, adding/importing sources and setting properties on various objects.\n"
  puts "Syntax:"
  puts "$script_file"
  puts "$script_file -tclargs \[--origin_dir <path>\]"
  puts "$script_file -tclargs \[--project_name <name>\]"
  puts "$script_file -tclargs \[--help\]\n"
  puts "Usage:"
  puts "Name                   Description"
  puts "-------------------------------------------------------------------------"
  puts "\[--origin_dir <path>\]  Determine source file paths wrt this path. Default"
  puts "                       origin_dir path value is \".\", otherwise, the value"
  puts "                       that was set with the \"-paths_relative_to\" switch"
  puts "                       when this script was generated.\n"
  puts "\[--project_name <name>\] Create project with the specified name. Default"
  puts "                       name is the name of the project from where this"
  puts "                       script was generated.\n"
  puts "\[--help\]               Print help information for this script"
  puts "-------------------------------------------------------------------------\n"
  exit 0
}

if { $::argc > 0 } {
  for {set i 0} {$i < $::argc} {incr i} {
    set option [string trim [lindex $::argv $i]]
    switch -regexp -- $option {
      "--origin_dir"   { incr i; set origin_dir [lindex $::argv $i] }
      "--project_name" { incr i; set _xil_proj_name_ [lindex $::argv $i] }
      "--help"         { print_help }
      default {
        if { [regexp {^-} $option] } {
          puts "ERROR: Unknown option '$option' specified, please type '$script_file -tclargs --help' for usage info.\n"
          return 1
        }
      }
    }
  }
}

# Set the directory path for the original project from where this script was exported
set orig_proj_dir "[file normalize "$origin_dir/ibert_ultrascale_gty_0_ex"]"

# Check for paths and files needed for project creation
set validate_required 0
if { $validate_required } {
  if { [checkRequiredFiles $origin_dir] } {
    puts "Tcl file $script_file is valid. All files required for project creation is accesable. "
  } else {
    puts "Tcl file $script_file is not valid. Not all files required for project creation is accesable. "
    return
  }
}

# Create project
create_project ${_xil_proj_name_} ./${_xil_proj_name_} -part xcku5p-ffvb676-2-i

# Set the directory path for the new project
set proj_dir [get_property directory [current_project]]

# Reconstruct message rules
# None

# Set project properties
set obj [current_project]
set_property -name "board_part_repo_paths" -value "[file normalize "$origin_dir/../../TEF1001/board_files"]" -objects $obj
set_property -name "default_lib" -value "xil_defaultlib" -objects $obj
set_property -name "enable_resource_estimation" -value "0" -objects $obj
set_property -name "enable_vhdl_2008" -value "1" -objects $obj
set_property -name "ip_cache_permissions" -value "read write" -objects $obj
set_property -name "ip_output_repo" -value "$proj_dir/${_xil_proj_name_}.cache/ip" -objects $obj
set_property -name "mem.enable_memory_map_generation" -value "1" -objects $obj
set_property -name "part" -value "xcku5p-ffvb676-2-i" -objects $obj
set_property -name "revised_directory_structure" -value "1" -objects $obj
set_property -name "sim.central_dir" -value "$proj_dir/${_xil_proj_name_}.ip_user_files" -objects $obj
set_property -name "sim.ip.auto_export_scripts" -value "1" -objects $obj
set_property -name "simulator_language" -value "Mixed" -objects $obj
set_property -name "sim_compile_state" -value "1" -objects $obj
set_property -name "use_inline_hdl_ip" -value "1" -objects $obj
set_property -name "webtalk.modelsim_export_sim" -value "2" -objects $obj
set_property -name "webtalk.questa_export_sim" -value "2" -objects $obj
set_property -name "webtalk.riviera_export_sim" -value "2" -objects $obj
set_property -name "webtalk.vcs_export_sim" -value "2" -objects $obj
set_property -name "webtalk.xsim_export_sim" -value "2" -objects $obj
set_property -name "xpm_libraries" -value "XPM_CDC XPM_FIFO XPM_MEMORY" -objects $obj

# Create 'sources_1' fileset (if not found)
if {[string equal [get_filesets -quiet sources_1] ""]} {
  create_fileset -srcset sources_1
}

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/example_ibert_ultrascale_gty_0.v"] \
 [file normalize "${origin_dir}/../../multiple_boards/usr_accesse2_read.vhd"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
set file "$origin_dir/../../multiple_boards/usr_accesse2_read.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj


# Set 'sources_1' fileset file properties for local files
# None

# Set 'sources_1' fileset properties
set obj [get_filesets sources_1]
set_property -name "dataflow_viewer_settings" -value "min_width=16" -objects $obj
set_property -name "top" -value "XCKU5P_DUAL_QSFP_ibert_4_166_wrapper" -objects $obj
set_property -name "top_auto_set" -value "0" -objects $obj

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/ip/sources_1/ip/ibert_ultrascale_gty_0/ibert_ultrascale_gty_0.xci"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
set file "$origin_dir/ip/sources_1/ip/ibert_ultrascale_gty_0/ibert_ultrascale_gty_0.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}


# Set 'sources_1' fileset file properties for local files
# None

# Create 'constrs_1' fileset (if not found)
if {[string equal [get_filesets -quiet constrs_1] ""]} {
  create_fileset -constrset constrs_1
}

# Set 'constrs_1' fileset object
set obj [get_filesets constrs_1]

# Add/Import constrs file and set constrs file properties
set file "[file normalize "$origin_dir/example_ibert_ultrascale_gty_0.xdc"]"
set file_added [add_files -norecurse -fileset $obj [list $file]]
set file "$origin_dir/example_ibert_ultrascale_gty_0.xdc"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets constrs_1] [list "*$file"]]
set_property -name "file_type" -value "XDC" -objects $file_obj

# Add/Import constrs file and set constrs file properties
set file "[file normalize "$origin_dir/ibert_ultrascale_gty_ip_example.xdc"]"
set file_added [add_files -norecurse -fileset $obj [list $file]]
set file "$origin_dir/ibert_ultrascale_gty_ip_example.xdc"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets constrs_1] [list "*$file"]]
set_property -name "file_type" -value "XDC" -objects $file_obj

# Add/Import constrs file and set constrs file properties
set file "[file normalize "$origin_dir/ibert_waivers_example.xdc"]"
set file_added [add_files -norecurse -fileset $obj [list $file]]
set file "$origin_dir/ibert_waivers_example.xdc"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets constrs_1] [list "*$file"]]
set_property -name "file_type" -value "XDC" -objects $file_obj

# Add/Import constrs file and set constrs file properties
set file "[file normalize "$origin_dir/../../XCKU5P_DUAL_QSFP/constraints/qaudspi.xdc"]"
set file_added [add_files -norecurse -fileset $obj [list $file]]
set file "$origin_dir/../../XCKU5P_DUAL_QSFP/constraints/qaudspi.xdc"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets constrs_1] [list "*$file"]]
set_property -name "file_type" -value "XDC" -objects $file_obj

# Add/Import constrs file and set constrs file properties
set file "[file normalize "$origin_dir/../../XCKU5P_DUAL_QSFP/constraints/pcie.xdc"]"
set file_added [add_files -norecurse -fileset $obj [list $file]]
set file "$origin_dir/../../XCKU5P_DUAL_QSFP/constraints/pcie.xdc"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets constrs_1] [list "*$file"]]
set_property -name "file_type" -value "XDC" -objects $file_obj

# Add/Import constrs file and set constrs file properties
set file "[file normalize "$origin_dir/../../XCKU5P_DUAL_QSFP/constraints/qsfp_control_signals.xdc"]"
set file_added [add_files -norecurse -fileset $obj [list $file]]
set file "$origin_dir/../../XCKU5P_DUAL_QSFP/constraints/qsfp_control_signals.xdc"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets constrs_1] [list "*$file"]]
set_property -name "file_type" -value "XDC" -objects $file_obj

# Set 'constrs_1' fileset properties
set obj [get_filesets constrs_1]
set_property -name "target_part" -value "xcku5p-ffvb676-2-i" -objects $obj

# Create 'sim_1' fileset (if not found)
if {[string equal [get_filesets -quiet sim_1] ""]} {
  create_fileset -simset sim_1
}

# Set 'sim_1' fileset object
set obj [get_filesets sim_1]
# Empty (no sources present)

# Set 'sim_1' fileset properties
set obj [get_filesets sim_1]
set_property -name "sim_wrapper_top" -value "1" -objects $obj
set_property -name "top" -value "example_ibert_ultrascale_gty_0" -objects $obj
set_property -name "top_auto_set" -value "0" -objects $obj
set_property -name "top_lib" -value "xil_defaultlib" -objects $obj

# Set 'utils_1' fileset object
set obj [get_filesets utils_1]
set files [list \
 [file normalize "${origin_dir}/../../multiple_boards/copy_bitstream_and_mask.tcl"] \
]
add_files -norecurse -fileset $obj $files

# Set 'utils_1' fileset file properties for remote files
set file "$origin_dir/../../multiple_boards/copy_bitstream_and_mask.tcl"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets utils_1] [list "*$file"]]
set_property -name "file_type" -value "TCL" -objects $file_obj


# Set 'utils_1' fileset file properties for local files
# None

# Set 'utils_1' fileset properties
set obj [get_filesets utils_1]


# Adding sources referenced in BDs, if not already added


# Proc to create BD QSFP_management
proc cr_bd_QSFP_management { parentCell } {

  # CHANGE DESIGN NAME HERE
  set design_name QSFP_management

  common::send_gid_msg -ssname BD::TCL -id 2010 -severity "INFO" "Currently there is no design <$design_name> in project, so creating one..."

  create_bd_design $design_name

  set bCheckIPsPassed 1
  ##################################################################
  # CHECK IPs
  ##################################################################
  set bCheckIPs 1
  if { $bCheckIPs == 1 } {
     set list_check_ips "\ 
  xilinx.com:ip:axi_gpio:2.0\
  xilinx.com:ip:axi_iic:2.1\
  xilinx.com:inline_hdl:ilslice:1.0\
  xilinx.com:inline_hdl:ilconcat:1.0\
  "

   set list_ips_missing ""
   common::send_gid_msg -ssname BD::TCL -id 2011 -severity "INFO" "Checking if the following IPs exist in the project's IP catalog: $list_check_ips ."

   foreach ip_vlnv $list_check_ips {
      set ip_obj [get_ipdefs -all $ip_vlnv]
      if { $ip_obj eq "" } {
         lappend list_ips_missing $ip_vlnv
      }
   }

   if { $list_ips_missing ne "" } {
      catch {common::send_gid_msg -ssname BD::TCL -id 2012 -severity "ERROR" "The following IPs are not found in the IP Catalog:\n  $list_ips_missing\n\nResolution: Please add the repository containing the IP(s) to the project." }
      set bCheckIPsPassed 0
   }

  }

  if { $bCheckIPsPassed != 1 } {
    common::send_gid_msg -ssname BD::TCL -id 2023 -severity "WARNING" "Will not continue with creation of design due to the error(s) above."
    return 3
  }

  variable script_folder

  if { $parentCell eq "" } {
     set parentCell [get_bd_cells /]
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj


  # Create interface ports
  set QSFP_I2C [ create_bd_intf_port -mode Master -vlnv xilinx.com:interface:iic_rtl:1.0 QSFP_I2C ]

  set S_AXI_GPIO [ create_bd_intf_port -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI_GPIO ]
  set_property -dict [ list \
   CONFIG.ADDR_WIDTH {16} \
   CONFIG.ARUSER_WIDTH {0} \
   CONFIG.AWUSER_WIDTH {0} \
   CONFIG.BUSER_WIDTH {0} \
   CONFIG.DATA_WIDTH {32} \
   CONFIG.FREQ_HZ {250000000} \
   CONFIG.HAS_BRESP {1} \
   CONFIG.HAS_BURST {0} \
   CONFIG.HAS_CACHE {0} \
   CONFIG.HAS_LOCK {0} \
   CONFIG.HAS_PROT {0} \
   CONFIG.HAS_QOS {0} \
   CONFIG.HAS_REGION {0} \
   CONFIG.HAS_RRESP {1} \
   CONFIG.HAS_WSTRB {1} \
   CONFIG.ID_WIDTH {0} \
   CONFIG.NUM_READ_OUTSTANDING {1} \
   CONFIG.NUM_READ_THREADS {1} \
   CONFIG.NUM_WRITE_OUTSTANDING {1} \
   CONFIG.NUM_WRITE_THREADS {1} \
   CONFIG.PROTOCOL {AXI4LITE} \
   CONFIG.READ_WRITE_MODE {READ_WRITE} \
   CONFIG.RUSER_BITS_PER_BYTE {0} \
   CONFIG.RUSER_WIDTH {0} \
   CONFIG.WUSER_BITS_PER_BYTE {0} \
   CONFIG.WUSER_WIDTH {0} \
   ] $S_AXI_GPIO

  set S_AXI_IIC [ create_bd_intf_port -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI_IIC ]
  set_property -dict [ list \
   CONFIG.ADDR_WIDTH {16} \
   CONFIG.ARUSER_WIDTH {0} \
   CONFIG.AWUSER_WIDTH {0} \
   CONFIG.BUSER_WIDTH {0} \
   CONFIG.DATA_WIDTH {32} \
   CONFIG.FREQ_HZ {250000000} \
   CONFIG.HAS_BRESP {1} \
   CONFIG.HAS_BURST {0} \
   CONFIG.HAS_CACHE {0} \
   CONFIG.HAS_LOCK {0} \
   CONFIG.HAS_PROT {0} \
   CONFIG.HAS_QOS {0} \
   CONFIG.HAS_REGION {0} \
   CONFIG.HAS_RRESP {1} \
   CONFIG.HAS_WSTRB {1} \
   CONFIG.ID_WIDTH {0} \
   CONFIG.NUM_READ_OUTSTANDING {1} \
   CONFIG.NUM_READ_THREADS {1} \
   CONFIG.NUM_WRITE_OUTSTANDING {1} \
   CONFIG.NUM_WRITE_THREADS {1} \
   CONFIG.PROTOCOL {AXI4LITE} \
   CONFIG.READ_WRITE_MODE {READ_WRITE} \
   CONFIG.RUSER_BITS_PER_BYTE {0} \
   CONFIG.RUSER_WIDTH {0} \
   CONFIG.WUSER_BITS_PER_BYTE {0} \
   CONFIG.WUSER_WIDTH {0} \
   ] $S_AXI_IIC


  # Create ports
  set QSFP_MOD_PRSN [ create_bd_port -dir I QSFP_MOD_PRSN ]
  set QSFP_INTERRUPT [ create_bd_port -dir I QSFP_INTERRUPT ]
  set QSFP_RESET [ create_bd_port -dir O -from 0 -to 0 QSFP_RESET ]
  set QSFP_MOD_SEL [ create_bd_port -dir O -from 0 -to 0 QSFP_MOD_SEL ]
  set QSFP_LP_MODE [ create_bd_port -dir O -from 0 -to 0 QSFP_LP_MODE ]
  set QSFP_LED [ create_bd_port -dir O -from 0 -to 0 QSFP_LED ]
  set s_axi_aresetn [ create_bd_port -dir I s_axi_aresetn ]
  set s_axi_aclk [ create_bd_port -dir I -type clk -freq_hz 250000000 s_axi_aclk ]

  # Create instance: axi_gpio_0, and set properties
  set axi_gpio_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_gpio:2.0 axi_gpio_0 ]
  set_property -dict [list \
    CONFIG.C_ALL_INPUTS {1} \
    CONFIG.C_ALL_OUTPUTS_2 {1} \
    CONFIG.C_DOUT_DEFAULT_2 {0x0000001C} \
    CONFIG.C_GPIO2_WIDTH {6} \
    CONFIG.C_GPIO_WIDTH {6} \
    CONFIG.C_IS_DUAL {1} \
  ] $axi_gpio_0


  # Create instance: axi_iic_0, and set properties
  set axi_iic_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_iic:2.1 axi_iic_0 ]

  # Create instance: GPIO_O2, and set properties
  set GPIO_O2 [ create_bd_cell -type inline_hdl -vlnv xilinx.com:inline_hdl:ilslice:1.0 GPIO_O2 ]
  set_property -dict [list \
    CONFIG.DIN_FROM {2} \
    CONFIG.DIN_TO {2} \
    CONFIG.DIN_WIDTH {6} \
  ] $GPIO_O2


  # Create instance: xlconcat_0, and set properties
  set xlconcat_0 [ create_bd_cell -type inline_hdl -vlnv xilinx.com:inline_hdl:ilconcat:1.0 xlconcat_0 ]
  set_property CONFIG.NUM_PORTS {6} $xlconcat_0


  # Create instance: GPIO_O3, and set properties
  set GPIO_O3 [ create_bd_cell -type inline_hdl -vlnv xilinx.com:inline_hdl:ilslice:1.0 GPIO_O3 ]
  set_property -dict [list \
    CONFIG.DIN_FROM {3} \
    CONFIG.DIN_TO {3} \
    CONFIG.DIN_WIDTH {6} \
  ] $GPIO_O3


  # Create instance: GPIO_O4, and set properties
  set GPIO_O4 [ create_bd_cell -type inline_hdl -vlnv xilinx.com:inline_hdl:ilslice:1.0 GPIO_O4 ]
  set_property -dict [list \
    CONFIG.DIN_FROM {4} \
    CONFIG.DIN_TO {4} \
    CONFIG.DIN_WIDTH {6} \
  ] $GPIO_O4


  # Create instance: GPIO_O5, and set properties
  set GPIO_O5 [ create_bd_cell -type inline_hdl -vlnv xilinx.com:inline_hdl:ilslice:1.0 GPIO_O5 ]
  set_property -dict [list \
    CONFIG.DIN_FROM {5} \
    CONFIG.DIN_TO {5} \
    CONFIG.DIN_WIDTH {6} \
  ] $GPIO_O5


  # Create interface connections
  connect_bd_intf_net -intf_net S_AXI_GPIO_1 [get_bd_intf_pins axi_gpio_0/S_AXI] [get_bd_intf_ports S_AXI_GPIO]
  connect_bd_intf_net -intf_net S_AXI_IIC_1 [get_bd_intf_pins axi_iic_0/S_AXI] [get_bd_intf_ports S_AXI_IIC]
  connect_bd_intf_net -intf_net axi_iic_0_IIC [get_bd_intf_pins axi_iic_0/IIC] [get_bd_intf_ports QSFP_I2C]

  # Create port connections
  connect_bd_net -net GPIO_O2_Dout  [get_bd_pins GPIO_O2/Dout] \
  [get_bd_ports QSFP_RESET] \
  [get_bd_pins xlconcat_0/In2]
  connect_bd_net -net GPIO_O3_Dout  [get_bd_pins GPIO_O3/Dout] \
  [get_bd_ports QSFP_MOD_SEL] \
  [get_bd_pins xlconcat_0/In3]
  connect_bd_net -net GPIO_O4_Dout  [get_bd_pins GPIO_O4/Dout] \
  [get_bd_ports QSFP_LP_MODE] \
  [get_bd_pins xlconcat_0/In4]
  connect_bd_net -net GPIO_O5_Dout  [get_bd_pins GPIO_O5/Dout] \
  [get_bd_ports QSFP_LED] \
  [get_bd_pins xlconcat_0/In5]
  connect_bd_net -net INTERRUPT_1  [get_bd_ports QSFP_INTERRUPT] \
  [get_bd_pins xlconcat_0/In1]
  connect_bd_net -net MOD_PRSN_1  [get_bd_ports QSFP_MOD_PRSN] \
  [get_bd_pins xlconcat_0/In0]
  connect_bd_net -net axi_gpio_0_gpio_io_o  [get_bd_pins axi_gpio_0/gpio2_io_o] \
  [get_bd_pins GPIO_O2/Din] \
  [get_bd_pins GPIO_O3/Din] \
  [get_bd_pins GPIO_O4/Din] \
  [get_bd_pins GPIO_O5/Din]
  connect_bd_net -net s_axi_aclk_1  [get_bd_ports s_axi_aclk] \
  [get_bd_pins axi_gpio_0/s_axi_aclk] \
  [get_bd_pins axi_iic_0/s_axi_aclk]
  connect_bd_net -net s_axi_aresetn_1  [get_bd_ports s_axi_aresetn] \
  [get_bd_pins axi_gpio_0/s_axi_aresetn] \
  [get_bd_pins axi_iic_0/s_axi_aresetn]
  connect_bd_net -net xlconcat_0_dout  [get_bd_pins xlconcat_0/dout] \
  [get_bd_pins axi_gpio_0/gpio_io_i]

  # Create address segments


  # Restore current instance
  current_bd_instance $oldCurInst

  validate_bd_design
  save_bd_design
  close_bd_design $design_name 
}
# End of cr_bd_QSFP_management()

cr_bd_QSFP_management ""
set_property REGISTERED_WITH_MANAGER "1" [get_files QSFP_management.bd ] 
set_property SYNTH_CHECKPOINT_MODE "Hierarchical" [get_files QSFP_management.bd ] 

if { [get_files [list ibert_ultrascale_gty_0.xci]] == "" } {
  import_files -quiet -fileset sources_1 /home/mr_halfword/fpga_sio/fpga_tests/XCKU5P_DUAL_QSFP_ibert_4.166/ip/sources_1/ip/ibert_ultrascale_gty_0/ibert_ultrascale_gty_0.xci
}
if { [get_files [list example_ibert_ultrascale_gty_0.v]] == "" } {
  import_files -quiet -fileset sources_1 /home/mr_halfword/fpga_sio/fpga_tests/XCKU5P_DUAL_QSFP_ibert_4.166/example_ibert_ultrascale_gty_0.v
}
if { [get_files [list usr_accesse2_read.vhd]] == "" } {
  import_files -quiet -fileset sources_1 /home/mr_halfword/fpga_sio/multiple_boards/usr_accesse2_read.vhd
}


# Proc to create BD XCKU5P_DUAL_QSFP_ibert_4_166
proc cr_bd_XCKU5P_DUAL_QSFP_ibert_4_166 { parentCell } {
# The design that will be created by this Tcl proc contains the following 
# module references:
# example_ibert_ultrascale_gty_0, usr_accesse2_read


# The design that will be created by this Tcl proc contains the following 
# block design container source references:
# QSFP_management



  # CHANGE DESIGN NAME HERE
  set design_name XCKU5P_DUAL_QSFP_ibert_4_166

  common::send_gid_msg -ssname BD::TCL -id 2010 -severity "INFO" "Currently there is no design <$design_name> in project, so creating one..."

  create_bd_design $design_name

  set bCheckIPsPassed 1
  ##################################################################
  # CHECK IPs
  ##################################################################
  set bCheckIPs 1
  if { $bCheckIPs == 1 } {
     set list_check_ips "\ 
  xilinx.com:ip:xdma:4.1\
  xilinx.com:ip:util_ds_buf:2.2\
  xilinx.com:ip:smartconnect:1.0\
  xilinx.com:ip:axi_gpio:2.0\
  xilinx.com:ip:axi_quad_spi:3.2\
  xilinx.com:ip:system_management_wiz:1.3\
  "

   set list_ips_missing ""
   common::send_gid_msg -ssname BD::TCL -id 2011 -severity "INFO" "Checking if the following IPs exist in the project's IP catalog: $list_check_ips ."

   foreach ip_vlnv $list_check_ips {
      set ip_obj [get_ipdefs -all $ip_vlnv]
      if { $ip_obj eq "" } {
         lappend list_ips_missing $ip_vlnv
      }
   }

   if { $list_ips_missing ne "" } {
      catch {common::send_gid_msg -ssname BD::TCL -id 2012 -severity "ERROR" "The following IPs are not found in the IP Catalog:\n  $list_ips_missing\n\nResolution: Please add the repository containing the IP(s) to the project." }
      set bCheckIPsPassed 0
   }

  }

  ##################################################################
  # CHECK Modules
  ##################################################################
  set bCheckModules 1
  if { $bCheckModules == 1 } {
     set list_check_mods "\ 
  example_ibert_ultrascale_gty_0\
  usr_accesse2_read\
  "

   set list_mods_missing ""
   common::send_gid_msg -ssname BD::TCL -id 2020 -severity "INFO" "Checking if the following modules exist in the project's sources: $list_check_mods ."

   foreach mod_vlnv $list_check_mods {
      if { [can_resolve_reference $mod_vlnv] == 0 } {
         lappend list_mods_missing $mod_vlnv
      }
   }

   if { $list_mods_missing ne "" } {
      catch {common::send_gid_msg -ssname BD::TCL -id 2021 -severity "ERROR" "The following module(s) are not found in the project: $list_mods_missing" }
      common::send_gid_msg -ssname BD::TCL -id 2022 -severity "INFO" "Please add source files for the missing module(s) above."
      set bCheckIPsPassed 0
   }
}

  ##################################################################
  # CHECK Block Design Container Sources
  ##################################################################
  set bCheckSources 1
  set list_bdc_active "QSFP_management"

  array set map_bdc_missing {}
  set map_bdc_missing(ACTIVE) ""
  set map_bdc_missing(BDC) ""

  if { $bCheckSources == 1 } {
     set list_check_srcs "\ 
  QSFP_management \
  "

   common::send_gid_msg -ssname BD::TCL -id 2056 -severity "INFO" "Checking if the following sources for block design container exist in the project: $list_check_srcs .\n\n"

   foreach src $list_check_srcs {
      if { [can_resolve_reference $src] == 0 } {
         if { [lsearch $list_bdc_active $src] != -1 } {
            set map_bdc_missing(ACTIVE) "$map_bdc_missing(ACTIVE) $src"
         } else {
            set map_bdc_missing(BDC) "$map_bdc_missing(BDC) $src"
         }
      }
   }

   if { [llength $map_bdc_missing(ACTIVE)] > 0 } {
      catch {common::send_gid_msg -ssname BD::TCL -id 2057 -severity "ERROR" "The following source(s) of Active variants are not found in the project: $map_bdc_missing(ACTIVE)" }
      common::send_gid_msg -ssname BD::TCL -id 2060 -severity "INFO" "Please add source files for the missing source(s) above."
      set bCheckIPsPassed 0
   }
   if { [llength $map_bdc_missing(BDC)] > 0 } {
      catch {common::send_gid_msg -ssname BD::TCL -id 2059 -severity "WARNING" "The following source(s) of variants are not found in the project: $map_bdc_missing(BDC)" }
      common::send_gid_msg -ssname BD::TCL -id 2060 -severity "INFO" "Please add source files for the missing source(s) above."
   }
}

  if { $bCheckIPsPassed != 1 } {
    common::send_gid_msg -ssname BD::TCL -id 2023 -severity "WARNING" "Will not continue with creation of design due to the error(s) above."
    return 3
  }

  variable script_folder

  if { $parentCell eq "" } {
     set parentCell [get_bd_cells /]
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj


  # Create interface ports
  set QSFP_I2C_A [ create_bd_intf_port -mode Master -vlnv xilinx.com:interface:iic_rtl:1.0 QSFP_I2C_A ]

  set QSFP_I2C_B [ create_bd_intf_port -mode Master -vlnv xilinx.com:interface:iic_rtl:1.0 QSFP_I2C_B ]

  set pcie_7x_mgt [ create_bd_intf_port -mode Master -vlnv xilinx.com:interface:pcie_7x_mgt_rtl:1.0 pcie_7x_mgt ]

  set CLK_PCIe_100MHz [ create_bd_intf_port -mode Slave -vlnv xilinx.com:interface:diff_clock_rtl:1.0 CLK_PCIe_100MHz ]
  set_property -dict [ list \
   CONFIG.FREQ_HZ {100000000} \
   ] $CLK_PCIe_100MHz


  # Create ports
  set gty_txn_o [ create_bd_port -dir O -from 7 -to 0 gty_txn_o ]
  set gty_txp_o [ create_bd_port -dir O -from 7 -to 0 gty_txp_o ]
  set gty_sysclkp_i [ create_bd_port -dir I gty_sysclkp_i ]
  set gty_rxn_i [ create_bd_port -dir I -from 7 -to 0 gty_rxn_i ]
  set gty_rxp_i [ create_bd_port -dir I -from 7 -to 0 gty_rxp_i ]
  set QSFP_RESET_A [ create_bd_port -dir O -from 0 -to 0 QSFP_RESET_A ]
  set QSFP_RESET_B [ create_bd_port -dir O -from 0 -to 0 QSFP_RESET_B ]
  set gty_refclk0p_i [ create_bd_port -dir I -from 0 -to 0 gty_refclk0p_i ]
  set gty_refclk0n_i [ create_bd_port -dir I -from 0 -to 0 gty_refclk0n_i ]
  set gty_refclk1p_i [ create_bd_port -dir I -from 0 -to 0 gty_refclk1p_i ]
  set gty_refclk1n_i [ create_bd_port -dir I -from 0 -to 0 gty_refclk1n_i ]
  set QSFP_MOD_SEL_A [ create_bd_port -dir O -from 0 -to 0 QSFP_MOD_SEL_A ]
  set QSFP_MOD_PRSN_A [ create_bd_port -dir I QSFP_MOD_PRSN_A ]
  set QSFP_MOD_PRSN_B [ create_bd_port -dir I QSFP_MOD_PRSN_B ]
  set QSFP_INTERRUPT_A [ create_bd_port -dir I QSFP_INTERRUPT_A ]
  set QSFP_INTERRUPT_B [ create_bd_port -dir I QSFP_INTERRUPT_B ]
  set QSFP_LP_MODE_A [ create_bd_port -dir O -from 0 -to 0 QSFP_LP_MODE_A ]
  set QSFP_LED_A [ create_bd_port -dir O -from 0 -to 0 QSFP_LED_A ]
  set QSFP_LED_B [ create_bd_port -dir O -from 0 -to 0 QSFP_LED_B ]
  set QSFP_MOD_SEL_B [ create_bd_port -dir O -from 0 -to 0 QSFP_MOD_SEL_B ]
  set QSFP_LP_MODE_B [ create_bd_port -dir O -from 0 -to 0 QSFP_LP_MODE_B ]
  set PCI_PERSTN [ create_bd_port -dir I -type rst PCI_PERSTN ]
  set_property -dict [ list \
   CONFIG.POLARITY {ACTIVE_LOW} \
 ] $PCI_PERSTN

  # Create instance: example_ibert_ultras_0, and set properties
  set block_name example_ibert_ultrascale_gty_0
  set block_cell_name example_ibert_ultras_0
  if { [catch {set example_ibert_ultras_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $example_ibert_ultras_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: xdma_0, and set properties
  set xdma_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xdma:4.1 xdma_0 ]
  set_property -dict [list \
    CONFIG.axi_data_width {256_bit} \
    CONFIG.axisten_freq {250} \
    CONFIG.en_axi_slave_if {false} \
    CONFIG.en_gt_selection {true} \
    CONFIG.functional_mode {AXI_Bridge} \
    CONFIG.mode_selection {Advanced} \
    CONFIG.pf0_bar0_64bit {true} \
    CONFIG.pf0_bar0_enabled {true} \
    CONFIG.pf0_base_class_menu {Memory_controller} \
    CONFIG.pf0_interrupt_pin {NONE} \
    CONFIG.pf0_msi_enabled {false} \
    CONFIG.pf0_sub_class_interface_menu {RAM} \
    CONFIG.pf0_subsystem_id {0014} \
    CONFIG.pf0_subsystem_vendor_id {0002} \
    CONFIG.pl_link_cap_max_link_speed {8.0_GT/s} \
    CONFIG.pl_link_cap_max_link_width {X8} \
    CONFIG.select_quad {GTY_Quad_225} \
    CONFIG.xdma_axi_intf_mm {AXI_Memory_Mapped} \
    CONFIG.xdma_rnum_chnl {4} \
    CONFIG.xdma_wnum_chnl {4} \
  ] $xdma_0


  # Create instance: QSFP_management_A, and set properties
  set QSFP_management_A [ create_bd_cell -type container -reference QSFP_management QSFP_management_A ]
  set_property -dict [list \
    CONFIG.ACTIVE_SIM_BD {QSFP_management.bd} \
    CONFIG.ACTIVE_SYNTH_BD {QSFP_management.bd} \
    CONFIG.ENABLE_DFX {0} \
    CONFIG.LIST_SIM_BD {QSFP_management.bd} \
    CONFIG.LIST_SYNTH_BD {QSFP_management.bd} \
    CONFIG.LOCK_PROPAGATE {0} \
  ] $QSFP_management_A


  set_property SELECTED_SIM_MODEL rtl  $QSFP_management_A

  # Create instance: QSFP_management_B, and set properties
  set QSFP_management_B [ create_bd_cell -type container -reference QSFP_management QSFP_management_B ]
  set_property -dict [list \
    CONFIG.ACTIVE_SIM_BD {QSFP_management.bd} \
    CONFIG.ACTIVE_SYNTH_BD {QSFP_management.bd} \
    CONFIG.ENABLE_DFX {0} \
    CONFIG.LIST_SIM_BD {QSFP_management.bd} \
    CONFIG.LIST_SYNTH_BD {QSFP_management.bd} \
    CONFIG.LOCK_PROPAGATE {0} \
  ] $QSFP_management_B


  set_property SELECTED_SIM_MODEL rtl  $QSFP_management_B

  # Create instance: util_ds_buf, and set properties
  set util_ds_buf [ create_bd_cell -type ip -vlnv xilinx.com:ip:util_ds_buf:2.2 util_ds_buf ]
  set_property CONFIG.C_BUF_TYPE {IBUFDSGTE} $util_ds_buf


  # Create instance: axi_smc, and set properties
  set axi_smc [ create_bd_cell -type ip -vlnv xilinx.com:ip:smartconnect:1.0 axi_smc ]
  set_property -dict [list \
    CONFIG.NUM_MI {7} \
    CONFIG.NUM_SI {1} \
  ] $axi_smc


  # Create instance: usr_accesse2_read_0, and set properties
  set block_name usr_accesse2_read
  set block_cell_name usr_accesse2_read_0
  if { [catch {set usr_accesse2_read_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $usr_accesse2_read_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: axi_gpio_0, and set properties
  set axi_gpio_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_gpio:2.0 axi_gpio_0 ]
  set_property CONFIG.C_ALL_INPUTS {1} $axi_gpio_0


  # Create instance: axi_quad_spi_0, and set properties
  set axi_quad_spi_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_quad_spi:3.2 axi_quad_spi_0 ]
  set_property -dict [list \
    CONFIG.C_FIFO_DEPTH {256} \
    CONFIG.C_SPI_MEMORY {2} \
    CONFIG.C_SPI_MODE {2} \
    CONFIG.C_USE_STARTUP {1} \
    CONFIG.C_USE_STARTUP_INT {1} \
  ] $axi_quad_spi_0


  # Create instance: system_management_wiz_0, and set properties
  set system_management_wiz_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:system_management_wiz:1.3 system_management_wiz_0 ]
  set_property -dict [list \
    CONFIG.CHANNEL_ENABLE_VP_VN {false} \
    CONFIG.CHANNEL_ENABLE_VUSER0 {true} \
    CONFIG.CHANNEL_ENABLE_VUSER1 {true} \
    CONFIG.CHANNEL_ENABLE_VUSER2 {true} \
    CONFIG.CHANNEL_ENABLE_VUSER3 {true} \
    CONFIG.SELECT_USER_SUPPLY1 {AVTT} \
    CONFIG.SELECT_USER_SUPPLY2 {VCCO} \
    CONFIG.USER_SUPPLY0_BANK {226} \
    CONFIG.USER_SUPPLY1_BANK {226} \
    CONFIG.USER_SUPPLY2_BANK {65} \
    CONFIG.USER_SUPPLY3_BANK {87} \
  ] $system_management_wiz_0


  # Create interface connections
  connect_bd_intf_net -intf_net QSFP_management_A_QSFP_I2C [get_bd_intf_ports QSFP_I2C_A] [get_bd_intf_pins QSFP_management_A/QSFP_I2C]
  connect_bd_intf_net -intf_net QSFP_management_B_QSFP_I2C [get_bd_intf_ports QSFP_I2C_B] [get_bd_intf_pins QSFP_management_B/QSFP_I2C]
  connect_bd_intf_net -intf_net axi_smc_M00_AXI [get_bd_intf_pins axi_smc/M00_AXI] [get_bd_intf_pins QSFP_management_A/S_AXI_GPIO]
  connect_bd_intf_net -intf_net axi_smc_M01_AXI [get_bd_intf_pins axi_smc/M01_AXI] [get_bd_intf_pins QSFP_management_A/S_AXI_IIC]
  connect_bd_intf_net -intf_net axi_smc_M02_AXI [get_bd_intf_pins axi_smc/M02_AXI] [get_bd_intf_pins QSFP_management_B/S_AXI_GPIO]
  connect_bd_intf_net -intf_net axi_smc_M03_AXI [get_bd_intf_pins axi_smc/M03_AXI] [get_bd_intf_pins QSFP_management_B/S_AXI_IIC]
  connect_bd_intf_net -intf_net axi_smc_M04_AXI [get_bd_intf_pins axi_smc/M04_AXI] [get_bd_intf_pins axi_gpio_0/S_AXI]
  connect_bd_intf_net -intf_net axi_smc_M05_AXI [get_bd_intf_pins axi_smc/M05_AXI] [get_bd_intf_pins axi_quad_spi_0/AXI_LITE]
  connect_bd_intf_net -intf_net axi_smc_M06_AXI [get_bd_intf_pins axi_smc/M06_AXI] [get_bd_intf_pins system_management_wiz_0/S_AXI_LITE]
  connect_bd_intf_net -intf_net diff_clock_rtl_0_1 [get_bd_intf_ports CLK_PCIe_100MHz] [get_bd_intf_pins util_ds_buf/CLK_IN_D]
  connect_bd_intf_net -intf_net xdma_0_M_AXI_B [get_bd_intf_pins xdma_0/M_AXI_B] [get_bd_intf_pins axi_smc/S00_AXI]
  connect_bd_intf_net -intf_net xdma_0_pcie_mgt [get_bd_intf_ports pcie_7x_mgt] [get_bd_intf_pins xdma_0/pcie_mgt]

  # Create port connections
  connect_bd_net -net QSFP_INTERRUPT_A_1  [get_bd_ports QSFP_INTERRUPT_A] \
  [get_bd_pins QSFP_management_A/QSFP_INTERRUPT]
  connect_bd_net -net QSFP_INTERRUPT_B_1  [get_bd_ports QSFP_INTERRUPT_B] \
  [get_bd_pins QSFP_management_B/QSFP_INTERRUPT]
  connect_bd_net -net QSFP_MOD_PRSN_A_1  [get_bd_ports QSFP_MOD_PRSN_A] \
  [get_bd_pins QSFP_management_A/QSFP_MOD_PRSN]
  connect_bd_net -net QSFP_MOD_PRSN_B_1  [get_bd_ports QSFP_MOD_PRSN_B] \
  [get_bd_pins QSFP_management_B/QSFP_MOD_PRSN]
  connect_bd_net -net QSFP_management_A_QSFP_LED  [get_bd_pins QSFP_management_A/QSFP_LED] \
  [get_bd_ports QSFP_LED_A]
  connect_bd_net -net QSFP_management_A_QSFP_LP_MODE  [get_bd_pins QSFP_management_A/QSFP_LP_MODE] \
  [get_bd_ports QSFP_LP_MODE_A]
  connect_bd_net -net QSFP_management_A_QSFP_MOD_SEL  [get_bd_pins QSFP_management_A/QSFP_MOD_SEL] \
  [get_bd_ports QSFP_MOD_SEL_A]
  connect_bd_net -net QSFP_management_A_QSFP_RESET  [get_bd_pins QSFP_management_A/QSFP_RESET] \
  [get_bd_ports QSFP_RESET_A]
  connect_bd_net -net QSFP_management_B_QSFP_LED  [get_bd_pins QSFP_management_B/QSFP_LED] \
  [get_bd_ports QSFP_LED_B]
  connect_bd_net -net QSFP_management_B_QSFP_LP_MODE  [get_bd_pins QSFP_management_B/QSFP_LP_MODE] \
  [get_bd_ports QSFP_LP_MODE_B]
  connect_bd_net -net QSFP_management_B_QSFP_MOD_SEL  [get_bd_pins QSFP_management_B/QSFP_MOD_SEL] \
  [get_bd_ports QSFP_MOD_SEL_B]
  connect_bd_net -net example_ibert_ultras_0_QSFP_RESET_B  [get_bd_pins QSFP_management_B/QSFP_RESET] \
  [get_bd_ports QSFP_RESET_B]
  connect_bd_net -net example_ibert_ultras_0_gty_txn_o  [get_bd_pins example_ibert_ultras_0/gty_txn_o] \
  [get_bd_ports gty_txn_o]
  connect_bd_net -net example_ibert_ultras_0_gty_txp_o  [get_bd_pins example_ibert_ultras_0/gty_txp_o] \
  [get_bd_ports gty_txp_o]
  connect_bd_net -net gty_refclk0n_i_1  [get_bd_ports gty_refclk0n_i] \
  [get_bd_pins example_ibert_ultras_0/gty_refclk0n_i]
  connect_bd_net -net gty_refclk0p_i_1  [get_bd_ports gty_refclk0p_i] \
  [get_bd_pins example_ibert_ultras_0/gty_refclk0p_i]
  connect_bd_net -net gty_refclk1n_i_1  [get_bd_ports gty_refclk1n_i] \
  [get_bd_pins example_ibert_ultras_0/gty_refclk1n_i]
  connect_bd_net -net gty_refclk1p_i_1  [get_bd_ports gty_refclk1p_i] \
  [get_bd_pins example_ibert_ultras_0/gty_refclk1p_i]
  connect_bd_net -net gty_rxn_i_1  [get_bd_ports gty_rxn_i] \
  [get_bd_pins example_ibert_ultras_0/gty_rxn_i]
  connect_bd_net -net gty_rxp_i_1  [get_bd_ports gty_rxp_i] \
  [get_bd_pins example_ibert_ultras_0/gty_rxp_i]
  connect_bd_net -net gty_sysclkp_i_1  [get_bd_ports gty_sysclkp_i] \
  [get_bd_pins example_ibert_ultras_0/gty_sysclkp_i]
  connect_bd_net -net reset_rtl_0_1  [get_bd_ports PCI_PERSTN] \
  [get_bd_pins xdma_0/sys_rst_n]
  connect_bd_net -net usr_accesse2_read_0_DATA_OUT  [get_bd_pins usr_accesse2_read_0/DATA_OUT] \
  [get_bd_pins axi_gpio_0/gpio_io_i]
  connect_bd_net -net util_ds_buf_IBUF_DS_ODIV2  [get_bd_pins util_ds_buf/IBUF_DS_ODIV2] \
  [get_bd_pins xdma_0/sys_clk]
  connect_bd_net -net util_ds_buf_IBUF_OUT  [get_bd_pins util_ds_buf/IBUF_OUT] \
  [get_bd_pins xdma_0/sys_clk_gt]
  connect_bd_net -net xdma_0_axi_aclk  [get_bd_pins xdma_0/axi_aclk] \
  [get_bd_pins axi_smc/aclk] \
  [get_bd_pins QSFP_management_A/s_axi_aclk] \
  [get_bd_pins QSFP_management_B/s_axi_aclk] \
  [get_bd_pins axi_gpio_0/s_axi_aclk] \
  [get_bd_pins axi_quad_spi_0/s_axi_aclk] \
  [get_bd_pins system_management_wiz_0/s_axi_aclk] \
  [get_bd_pins axi_quad_spi_0/ext_spi_clk]
  connect_bd_net -net xdma_0_axi_aresetn  [get_bd_pins xdma_0/axi_aresetn] \
  [get_bd_pins QSFP_management_A/s_axi_aresetn] \
  [get_bd_pins axi_smc/aresetn] \
  [get_bd_pins QSFP_management_B/s_axi_aresetn] \
  [get_bd_pins axi_gpio_0/s_axi_aresetn] \
  [get_bd_pins axi_quad_spi_0/s_axi_aresetn] \
  [get_bd_pins system_management_wiz_0/s_axi_aresetn]

  # Create address segments
  assign_bd_address -offset 0x00000000 -range 0x00001000 -target_address_space [get_bd_addr_spaces xdma_0/M_AXI_B] [get_bd_addr_segs QSFP_management_A/axi_gpio_0/S_AXI/Reg] -force
  assign_bd_address -offset 0x00002000 -range 0x00001000 -with_name SEG_axi_gpio_0_Reg_1 -target_address_space [get_bd_addr_spaces xdma_0/M_AXI_B] [get_bd_addr_segs QSFP_management_B/axi_gpio_0/S_AXI/Reg] -force
  assign_bd_address -offset 0x00006000 -range 0x00001000 -with_name SEG_axi_gpio_0_Reg_2 -target_address_space [get_bd_addr_spaces xdma_0/M_AXI_B] [get_bd_addr_segs axi_gpio_0/S_AXI/Reg] -force
  assign_bd_address -offset 0x00001000 -range 0x00001000 -target_address_space [get_bd_addr_spaces xdma_0/M_AXI_B] [get_bd_addr_segs QSFP_management_A/axi_iic_0/S_AXI/Reg] -force
  assign_bd_address -offset 0x00003000 -range 0x00001000 -with_name SEG_axi_iic_0_Reg_1 -target_address_space [get_bd_addr_spaces xdma_0/M_AXI_B] [get_bd_addr_segs QSFP_management_B/axi_iic_0/S_AXI/Reg] -force
  assign_bd_address -offset 0x00004000 -range 0x00001000 -target_address_space [get_bd_addr_spaces xdma_0/M_AXI_B] [get_bd_addr_segs axi_quad_spi_0/AXI_LITE/Reg] -force
  assign_bd_address -offset 0x00005000 -range 0x00001000 -target_address_space [get_bd_addr_spaces xdma_0/M_AXI_B] [get_bd_addr_segs system_management_wiz_0/S_AXI_LITE/Reg] -force


  # Restore current instance
  current_bd_instance $oldCurInst

  validate_bd_design
  save_bd_design
  close_bd_design $design_name 
}
# End of cr_bd_XCKU5P_DUAL_QSFP_ibert_4_166()

cr_bd_XCKU5P_DUAL_QSFP_ibert_4_166 ""
set_property REGISTERED_WITH_MANAGER "1" [get_files XCKU5P_DUAL_QSFP_ibert_4_166.bd ] 
set_property SYNTH_CHECKPOINT_MODE "Hierarchical" [get_files XCKU5P_DUAL_QSFP_ibert_4_166.bd ] 

#call make_wrapper to create wrapper files
if { [get_property IS_LOCKED [ get_files -norecurse [list XCKU5P_DUAL_QSFP_ibert_4_166.bd]] ] == 1  } {
  import_files -fileset sources_1 [file normalize "${origin_dir}/ibert_ultrascale_gty_0_ex/ibert_ultrascale_gty_0_ex.gen/sources_1/bd/XCKU5P_DUAL_QSFP_ibert_4_166/hdl/XCKU5P_DUAL_QSFP_ibert_4_166_wrapper.v" ]
} else {
  set wrapper_path [make_wrapper -fileset sources_1 -files [ get_files -norecurse [list XCKU5P_DUAL_QSFP_ibert_4_166.bd]] -top]
  add_files -norecurse -fileset sources_1 $wrapper_path
}


generate_target all [get_files XCKU5P_DUAL_QSFP_ibert_4_166.bd]

create_ip_run [get_files XCKU5P_DUAL_QSFP_ibert_4_166.bd]

# Set 'QSFP_management_inst_0' fileset object
set obj [get_filesets QSFP_management_inst_0]
# Set 'QSFP_management_inst_0' fileset file properties for remote files
# None

# Set 'QSFP_management_inst_0' fileset file properties for local files
# None

# Set 'QSFP_management_inst_0' fileset properties
set obj [get_filesets QSFP_management_inst_0]
set_property -name "top" -value "QSFP_management_inst_0" -objects $obj
set_property -name "top_auto_set" -value "0" -objects $obj

# Set 'QSFP_management_inst_1' fileset object
set obj [get_filesets QSFP_management_inst_1]
# Set 'QSFP_management_inst_1' fileset file properties for remote files
# None

# Set 'QSFP_management_inst_1' fileset file properties for local files
# None

# Set 'QSFP_management_inst_1' fileset properties
set obj [get_filesets QSFP_management_inst_1]
set_property -name "top" -value "QSFP_management_inst_1" -objects $obj
set_property -name "top_auto_set" -value "0" -objects $obj

set idrFlowPropertiesConstraints ""
catch {
 set idrFlowPropertiesConstraints [get_param runs.disableIDRFlowPropertyConstraints]
 set_param runs.disableIDRFlowPropertyConstraints 1
}

# Create 'synth_1' run (if not found)
if {[string equal [get_runs -quiet synth_1] ""]} {
    create_run -name synth_1 -part xcku5p-ffvb676-2-i -flow {Vivado Synthesis 2024} -strategy "Vivado Synthesis Defaults" -report_strategy {No Reports} -constrset constrs_1
} else {
  set_property strategy "Vivado Synthesis Defaults" [get_runs synth_1]
  set_property flow "Vivado Synthesis 2024" [get_runs synth_1]
}
set obj [get_runs synth_1]
set_property set_report_strategy_name 1 $obj
set_property report_strategy {Vivado Synthesis Default Reports} $obj
set_property set_report_strategy_name 0 $obj
# Create 'synth_1_synth_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs synth_1] synth_1_synth_report_utilization_0] "" ] } {
  create_report_config -report_name synth_1_synth_report_utilization_0 -report_type report_utilization:1.0 -steps synth_design -runs synth_1
}
set obj [get_report_configs -of_objects [get_runs synth_1] synth_1_synth_report_utilization_0]
if { $obj != "" } {

}
set obj [get_runs synth_1]
set_property -name "part" -value "xcku5p-ffvb676-2-i" -objects $obj
set_property -name "incremental_checkpoint" -value "$proj_dir/${_xil_proj_name_}.srcs/utils_1/imports/synth_1/XCKU5P_DUAL_QSFP_ibert_4_166_wrapper.dcp" -objects $obj
set_property -name "auto_incremental_checkpoint" -value "1" -objects $obj
set_property -name "strategy" -value "Vivado Synthesis Defaults" -objects $obj

# set the current synth run
current_run -synthesis [get_runs synth_1]

# Create 'impl_1' run (if not found)
if {[string equal [get_runs -quiet impl_1] ""]} {
    create_run -name impl_1 -part xcku5p-ffvb676-2-i -flow {Vivado Implementation 2024} -strategy "Vivado Implementation Defaults" -report_strategy {No Reports} -constrset constrs_1 -parent_run synth_1
} else {
  set_property strategy "Vivado Implementation Defaults" [get_runs impl_1]
  set_property flow "Vivado Implementation 2024" [get_runs impl_1]
}
set obj [get_runs impl_1]
set_property set_report_strategy_name 1 $obj
set_property report_strategy {Vivado Implementation Default Reports} $obj
set_property set_report_strategy_name 0 $obj
# Create 'impl_1_init_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_init_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_init_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps init_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_init_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj

}
# Create 'impl_1_opt_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_drc_0] "" ] } {
  create_report_config -report_name impl_1_opt_report_drc_0 -report_type report_drc:1.0 -steps opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_drc_0]
if { $obj != "" } {

}
# Create 'impl_1_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj

}
# Create 'impl_1_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps power_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj

}
# Create 'impl_1_place_report_io_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_io_0] "" ] } {
  create_report_config -report_name impl_1_place_report_io_0 -report_type report_io:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_io_0]
if { $obj != "" } {

}
# Create 'impl_1_place_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_utilization_0] "" ] } {
  create_report_config -report_name impl_1_place_report_utilization_0 -report_type report_utilization:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_utilization_0]
if { $obj != "" } {

}
# Create 'impl_1_place_report_control_sets_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_control_sets_0] "" ] } {
  create_report_config -report_name impl_1_place_report_control_sets_0 -report_type report_control_sets:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_control_sets_0]
if { $obj != "" } {
set_property -name "options.verbose" -value "1" -objects $obj

}
# Create 'impl_1_place_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name impl_1_place_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_place_report_incremental_reuse_1' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_1] "" ] } {
  create_report_config -report_name impl_1_place_report_incremental_reuse_1 -report_type report_incremental_reuse:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_1]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_place_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_place_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj

}
# Create 'impl_1_post_place_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_place_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_post_place_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_place_power_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_place_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj

}
# Create 'impl_1_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_phys_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj

}
# Create 'impl_1_route_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_drc_0] "" ] } {
  create_report_config -report_name impl_1_route_report_drc_0 -report_type report_drc:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_drc_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_methodology_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_methodology_0] "" ] } {
  create_report_config -report_name impl_1_route_report_methodology_0 -report_type report_methodology:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_methodology_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_power_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_power_0] "" ] } {
  create_report_config -report_name impl_1_route_report_power_0 -report_type report_power:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_power_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_route_status_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_route_status_0] "" ] } {
  create_report_config -report_name impl_1_route_report_route_status_0 -report_type report_route_status:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_route_status_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_route_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_timing_summary_0]
if { $obj != "" } {
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj

}
# Create 'impl_1_route_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name impl_1_route_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_incremental_reuse_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_clock_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_clock_utilization_0] "" ] } {
  create_report_config -report_name impl_1_route_report_clock_utilization_0 -report_type report_clock_utilization:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_clock_utilization_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_bus_skew_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_bus_skew_0] "" ] } {
  create_report_config -report_name impl_1_route_report_bus_skew_0 -report_type report_bus_skew:1.1 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_bus_skew_0]
if { $obj != "" } {
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
# Create 'impl_1_post_route_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_post_route_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_route_phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
# Create 'impl_1_post_route_phys_opt_report_bus_skew_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_bus_skew_0] "" ] } {
  create_report_config -report_name impl_1_post_route_phys_opt_report_bus_skew_0 -report_type report_bus_skew:1.1 -steps post_route_phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_bus_skew_0]
if { $obj != "" } {
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
set obj [get_runs impl_1]
set_property -name "part" -value "xcku5p-ffvb676-2-i" -objects $obj
set_property -name "strategy" -value "Vivado Implementation Defaults" -objects $obj
set_property -name "steps.write_bitstream.tcl.post" -value "[file normalize "$origin_dir/../../multiple_boards/copy_bitstream_and_mask.tcl"]" -objects $obj
set_property -name "steps.write_bitstream.args.mask_file" -value "1" -objects $obj
set_property -name "steps.write_bitstream.args.readback_file" -value "0" -objects $obj
set_property -name "steps.write_bitstream.args.verbose" -value "0" -objects $obj

# set the current impl run
current_run -implementation [get_runs impl_1]
catch {
 if { $idrFlowPropertiesConstraints != {} } {
   set_param runs.disableIDRFlowPropertyConstraints $idrFlowPropertiesConstraints
 }
}

puts "INFO: Project created:${_xil_proj_name_}"
# Create 'drc_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "drc_1" ] ] ""]} {
create_dashboard_gadget -name {drc_1} -type drc
}
set obj [get_dashboard_gadgets [ list "drc_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_drc_0" -objects $obj

# Create 'methodology_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "methodology_1" ] ] ""]} {
create_dashboard_gadget -name {methodology_1} -type methodology
}
set obj [get_dashboard_gadgets [ list "methodology_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_methodology_0" -objects $obj

# Create 'power_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "power_1" ] ] ""]} {
create_dashboard_gadget -name {power_1} -type power
}
set obj [get_dashboard_gadgets [ list "power_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_power_0" -objects $obj

# Create 'timing_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "timing_1" ] ] ""]} {
create_dashboard_gadget -name {timing_1} -type timing
}
set obj [get_dashboard_gadgets [ list "timing_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_timing_summary_0" -objects $obj

# Create 'utilization_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "utilization_1" ] ] ""]} {
create_dashboard_gadget -name {utilization_1} -type utilization
}
set obj [get_dashboard_gadgets [ list "utilization_1" ] ]
set_property -name "reports" -value "synth_1#synth_1_synth_report_utilization_0" -objects $obj
set_property -name "run.step" -value "synth_design" -objects $obj
set_property -name "run.type" -value "synthesis" -objects $obj

# Create 'utilization_2' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "utilization_2" ] ] ""]} {
create_dashboard_gadget -name {utilization_2} -type utilization
}
set obj [get_dashboard_gadgets [ list "utilization_2" ] ]
set_property -name "reports" -value "impl_1#impl_1_place_report_utilization_0" -objects $obj

move_dashboard_gadget -name {utilization_1} -row 0 -col 0
move_dashboard_gadget -name {power_1} -row 1 -col 0
move_dashboard_gadget -name {drc_1} -row 2 -col 0
move_dashboard_gadget -name {timing_1} -row 0 -col 1
move_dashboard_gadget -name {utilization_2} -row 1 -col 1
move_dashboard_gadget -name {methodology_1} -row 2 -col 1
